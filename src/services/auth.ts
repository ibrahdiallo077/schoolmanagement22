// src/services/auth.ts - VERSION CORRIG√âE COMPL√àTE POUR R√âSOUDRE LES PROBL√àMES D'AUTHENTIFICATION

const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001';

// ============================================================================
// INTERFACES (Simplifi√©es et corrig√©es)
// ============================================================================

export interface LoginCredentials {
  email: string;
  password: string;
  rememberMe?: boolean;
}

export interface AuthResponse {
  success: boolean;
  message?: string;
  error?: string;
  token?: string;
  accessToken?: string;
  refreshToken?: string;
  user?: UserSession;
  requiresFirstLogin?: boolean;
  session?: {
    connectionQuality: string;
    duration: string;
    rememberMe: boolean;
    expiresIn: string;
    canRefresh: boolean;
  };
  requestId?: string;
}

export interface UserSession {
  id: number;
  username: string;
  email: string;
  first_name?: string;
  last_name?: string;
  role: 'super_admin' | 'admin' | 'teacher' | 'accountant';
  is_active: boolean;
  avatar_url?: string;
  created_at?: string;
  updated_at?: string;
  last_login?: string;
  phone?: string;
  date_of_birth?: string;
}

// Interface pour les donn√©es stock√©es (simplifi√©e)
interface StoredAuthData {
  token: string;
  refreshToken?: string;
  user: UserSession;
  rememberMe: boolean;
  storedAt: number;
}

// ============================================================================
// AUTHSERVICE CORRIG√â
// ============================================================================

export class AuthService {
  
  // ==================== GESTION DES DONN√âES ====================
  
  /**
   * üßπ NETTOYER TOUTES LES DONN√âES D'AUTHENTIFICATION
   */
  static clearAllAuthData(): void {
    console.log('üßπ Nettoyage complet des donn√©es d\'authentification');
    
    // Nettoyer localStorage
    localStorage.removeItem('auth_token');
    localStorage.removeItem('token');
    localStorage.removeItem('accessToken');
    localStorage.removeItem('refreshToken');
    localStorage.removeItem('user_info');
    localStorage.removeItem('user');
    localStorage.removeItem('auth_data');
    localStorage.removeItem('auth_data_v3');
    
    // Nettoyer sessionStorage
    sessionStorage.removeItem('auth_token');
    sessionStorage.removeItem('token');
    sessionStorage.removeItem('accessToken');
    sessionStorage.removeItem('refreshToken');
    sessionStorage.removeItem('user_info');
    sessionStorage.removeItem('user');
    sessionStorage.removeItem('auth_data');
    sessionStorage.removeItem('auth_data_v3');
    
    console.log('‚úÖ Toutes les donn√©es d\'authentification supprim√©es');
  }

  /**
   * üîë OBTENIR LE TOKEN AVEC VALIDATION STRICTE
   */
  static getAuthToken(): string | null {
    // Priorit√©s de recherche
    const sources = [
      localStorage.getItem('auth_token'),
      localStorage.getItem('token'),
      sessionStorage.getItem('auth_token'),
      sessionStorage.getItem('token')
    ];

    for (const token of sources) {
      if (token && 
          token !== 'undefined' && 
          token !== 'null' && 
          token.trim() !== '' &&
          !token.includes('undefined') &&
          token.length > 20) {
        return token;
      }
    }

    // Si aucun token valide trouv√©, nettoyer
    console.log('‚ö†Ô∏è Aucun token valide trouv√©, nettoyage automatique');
    this.clearAllAuthData();
    return null;
  }

  /**
   * üíæ STOCKER LE TOKEN DE MANI√àRE S√âCURIS√âE
   */
  static setAuthToken(token: string, refreshToken?: string, user?: UserSession, rememberMe: boolean = false): void {
    if (!token || token === 'undefined' || token === 'null' || token.trim() === '') {
      console.error('‚ùå Tentative de stockage d\'un token invalide');
      this.clearAllAuthData();
      return;
    }

    console.log('üíæ Stockage du token d\'authentification');

    const storage = rememberMe ? localStorage : sessionStorage;
    const otherStorage = rememberMe ? sessionStorage : localStorage;

    // Nettoyer l'autre storage
    otherStorage.removeItem('auth_token');
    otherStorage.removeItem('token');
    otherStorage.removeItem('user_info');

    // Stocker dans le bon storage
    storage.setItem('auth_token', token);
    storage.setItem('token', token); // Compatibilit√©

    if (refreshToken && refreshToken !== 'undefined') {
      storage.setItem('refreshToken', refreshToken);
    }

    if (user) {
      storage.setItem('user_info', JSON.stringify(user));
    }

    // Stocker m√©tadonn√©es
    const authData: StoredAuthData = {
      token,
      refreshToken,
      user: user!,
      rememberMe,
      storedAt: Date.now()
    };
    storage.setItem('auth_data', JSON.stringify(authData));

    console.log(`‚úÖ Token stock√© avec succ√®s (${rememberMe ? 'localStorage' : 'sessionStorage'})`);
  }

  /**
   * üë§ OBTENIR L'UTILISATEUR STOCK√â
   */
  static getStoredUser(): UserSession | null {
    try {
      const userStr = localStorage.getItem('user_info') || sessionStorage.getItem('user_info');
      if (!userStr || userStr === 'undefined') {
        return null;
      }
      return JSON.parse(userStr);
    } catch (error) {
      console.error('üí• Erreur parsing user info:', error);
      return null;
    }
  }

  /**
   * ‚úÖ V√âRIFIER SI AUTHENTIFI√â
   */
  static isAuthenticated(): boolean {
    const token = this.getAuthToken();
    const user = this.getStoredUser();
    return !!(token && user);
  }

  /**
   * üö® G√âRER LES ERREURS D'AUTHENTIFICATION
   */
  static handleAuthError(error: any, response?: any): void {
    console.error('üö® Erreur d\'authentification d√©tect√©e:', error);

    const errorCodes = [
      'NO_TOKEN',
      'EXPIRED_TOKEN', 
      'INVALID_TOKEN',
      'MALFORMED_TOKEN',
      'USER_NOT_FOUND',
      'USER_INACTIVE',
      'USER_MISMATCH',
      'NOT_AUTHENTICATED'
    ];

    const errorCode = response?.code || error?.code;
    const errorMessage = error?.message || '';
    
    if (errorCodes.includes(errorCode) || 
        errorMessage.includes('Token') ||
        errorMessage.includes('authentification') ||
        errorMessage.includes('Session expir√©e') ||
        errorMessage.includes('Veuillez vous reconnecter')) {
      
      console.log('üîÑ Erreur d\'authentification critique, d√©connexion forc√©e');
      this.forceLogout();
    }
  }

  /**
   * üö™ D√âCONNEXION FORC√âE (NETTOYAGE + REDIRECTION)
   */
  static forceLogout(): void {
    console.log('üö™ D√©connexion forc√©e en cours...');
    
    this.clearAllAuthData();
    
    // Redirection diff√©r√©e pour √©viter les boucles
    setTimeout(() => {
      if (window.location.pathname !== '/signin') {
        window.location.href = '/signin';
      }
    }, 100);
  }

  // ==================== M√âTHODES D'AUTHENTIFICATION ====================

  /**
   * üîê CONNEXION
   */
  static async signIn(email: string, password: string, rememberMe: boolean = false): Promise<AuthResponse> {
    try {
      console.log(`üîê Connexion pour: ${email} (rememberMe: ${rememberMe})`);

      const response = await fetch(`${API_BASE_URL}/api/auth/signin`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify({ email, password, rememberMe }),
      });

      const data = await response.json();

      // Gestion sp√©ciale premi√®re connexion
      if (response.status === 403 && data.error === 'FIRST_LOGIN_REQUIRED') {
        console.log('üîÑ Premi√®re connexion requise');
        return {
          success: false,
          error: 'FIRST_LOGIN_REQUIRED',
          requiresFirstLogin: true,
          message: data.message,
          user: data.user
        };
      }

      // V√©rifier succ√®s de la connexion
      if (data.success && (data.accessToken || data.token) && data.user) {
        const token = data.accessToken || data.token;
        const refreshToken = data.refreshToken;

        console.log('‚úÖ Connexion r√©ussie');

        // Nettoyer d'abord toutes les anciennes donn√©es
        this.clearAllAuthData();

        // Stocker les nouvelles donn√©es
        this.setAuthToken(token, refreshToken, data.user, rememberMe);

        return {
          success: true,
          message: data.message || 'Connexion r√©ussie',
          token,
          accessToken: token,
          refreshToken,
          user: data.user,
          session: data.session
        };
      } else {
        console.log('‚ùå √âchec de connexion:', data.error);
        return {
          success: false,
          error: data.error || 'Email ou mot de passe incorrect'
        };
      }

    } catch (error: any) {
      console.error('üí• Erreur lors de la connexion:', error);
      return {
        success: false,
        error: 'Erreur de connexion au serveur'
      };
    }
  }

  /**
   * üîÑ RAFRA√éCHIR LE TOKEN
   */
  static async refreshToken(): Promise<AuthResponse> {
    try {
      const refreshToken = localStorage.getItem('refreshToken') || sessionStorage.getItem('refreshToken');
      
      if (!refreshToken || refreshToken === 'undefined') {
        console.log('üö´ Pas de refresh token disponible');
        this.forceLogout();
        return {
          success: false,
          error: 'MISSING_REFRESH_TOKEN'
        };
      }

      console.log('üîÑ Rafra√Æchissement du token...');

      const response = await fetch(`${API_BASE_URL}/api/auth/refresh-token`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify({ refreshToken }),
      });

      const data = await response.json();

      if (data.success && data.accessToken) {
        console.log('‚úÖ Token rafra√Æchi avec succ√®s');

        // R√©cup√©rer les donn√©es actuelles
        const currentUser = this.getStoredUser();
        const isRemembered = !!localStorage.getItem('auth_token');

        // Nettoyer et re-stocker
        this.clearAllAuthData();
        this.setAuthToken(data.accessToken, data.refreshToken, data.user || currentUser!, isRemembered);

        return {
          success: true,
          message: 'Token rafra√Æchi',
          token: data.accessToken,
          accessToken: data.accessToken,
          refreshToken: data.refreshToken,
          user: data.user || currentUser!
        };
      } else {
        console.log('‚ùå √âchec du rafra√Æchissement:', data.error);
        this.forceLogout();
        return {
          success: false,
          error: data.error || '√âchec du rafra√Æchissement'
        };
      }

    } catch (error: any) {
      console.error('üí• Erreur lors du rafra√Æchissement:', error);
      this.forceLogout();
      return {
        success: false,
        error: 'Erreur lors du rafra√Æchissement du token'
      };
    }
  }

  /**
   * üë§ OBTENIR L'UTILISATEUR ACTUEL
   */
  static async getCurrentUser(): Promise<UserSession | null> {
    try {
      const token = this.getAuthToken();
      
      if (!token) {
        console.log('üö´ Pas de token disponible');
        return null;
      }

      console.log('üë§ R√©cup√©ration de l\'utilisateur actuel...');

      const response = await fetch(`${API_BASE_URL}/api/auth/me`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        credentials: 'include',
      });

      if (!response.ok) {
        if (response.status === 401) {
          console.log('üîÑ Token expir√©, tentative de refresh...');
          const refreshResult = await this.refreshToken();
          
          if (refreshResult.success) {
            // Retry avec le nouveau token
            return this.getCurrentUser();
          }
        }
        
        console.log('‚ùå Erreur r√©cup√©ration utilisateur, d√©connexion');
        this.forceLogout();
        return null;
      }

      const data = await response.json();
      
      if (data.success && data.user) {
        // Mettre √† jour les infos stock√©es
        const currentToken = this.getAuthToken();
        const isRemembered = !!localStorage.getItem('auth_token');
        
        if (currentToken) {
          this.setAuthToken(currentToken, undefined, data.user, isRemembered);
        }
        
        return data.user;
      }

      console.log('‚ùå R√©ponse invalide, d√©connexion');
      this.forceLogout();
      return null;

    } catch (error: any) {
      console.error('üí• Erreur lors de la r√©cup√©ration de l\'utilisateur:', error);
      this.handleAuthError(error);
      return null;
    }
  }

  /**
   * üö™ D√âCONNEXION PROPRE
   */
  static async signOut(allDevices: boolean = false): Promise<void> {
    try {
      console.log(`üëã D√©connexion${allDevices ? ' de tous les appareils' : ''}...`);

      const token = this.getAuthToken();
      const refreshToken = localStorage.getItem('refreshToken') || sessionStorage.getItem('refreshToken');
      
      if (token) {
        try {
          await fetch(`${API_BASE_URL}/api/auth/logout`, {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json',
            },
            credentials: 'include',
            body: JSON.stringify({ 
              allDevices,
              refreshToken 
            }),
          });
        } catch (error) {
          console.warn('‚ö†Ô∏è Erreur lors de la d√©connexion serveur:', error);
        }
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Erreur d√©connexion serveur:', error);
    } finally {
      // Toujours nettoyer les donn√©es locales
      this.clearAllAuthData();
      console.log('‚úÖ D√©connexion effectu√©e');
      
      // Redirection si pas d√©j√† sur signin
      if (window.location.pathname !== '/signin') {
        window.location.href = '/signin';
      }
    }
  }

  // ==================== PREMI√àRE CONNEXION ====================

  /**
   * üìß V√âRIFIER EMAIL POUR PREMI√àRE CONNEXION
   */
  static async verifyEmail(email: string): Promise<AuthResponse> {
    try {
      console.log('üìß V√©rification email:', email);

      const response = await fetch(`${API_BASE_URL}/api/auth/verify-email`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email }),
      });

      const data = await response.json();

      if (data.success) {
        console.log('‚úÖ Email v√©rifi√©');
        return {
          success: true,
          user: data.user,
          message: data.message || 'Email v√©rifi√© avec succ√®s'
        };
      } else {
        console.log('‚ùå Email non trouv√©:', data.error);
        return {
          success: false,
          error: data.error || 'Email non trouv√©'
        };
      }

    } catch (error: any) {
      console.error('üí• Erreur v√©rification email:', error);
      return {
        success: false,
        error: 'Erreur lors de la v√©rification de l\'email'
      };
    }
  }

  /**
   * üîç V√âRIFIER TOKEN PREMI√àRE CONNEXION
   */
  static async verifyFirstLoginToken(token: string, email: string): Promise<AuthResponse> {
    try {
      console.log('üîç V√©rification token premi√®re connexion');

      const response = await fetch(`${API_BASE_URL}/api/auth/verify-first-login-token`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ token, email }),
      });

      const data = await response.json();

      if (data.success) {
        console.log('‚úÖ Token valide');
        return {
          success: true,
          user: data.user,
          message: data.message || 'Token valide'
        };
      } else {
        console.log('‚ùå Token invalide:', data.error);
        return {
          success: false,
          error: data.error || 'Token invalide ou expir√©'
        };
      }

    } catch (error: any) {
      console.error('üí• Erreur v√©rification token:', error);
      return {
        success: false,
        error: 'Erreur lors de la v√©rification du token'
      };
    }
  }

  /**
   * üîê CONFIGURER MOT DE PASSE PREMI√àRE CONNEXION
   */
  static async setupFirstPassword(token: string, newPassword: string): Promise<AuthResponse> {
    try {
      console.log('üîê Configuration mot de passe premi√®re connexion');

      const response = await fetch(`${API_BASE_URL}/api/auth/setup-first-password`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify({ token, newPassword }),
      });

      const data = await response.json();

      if (data.success) {
        console.log('‚úÖ Mot de passe configur√© avec succ√®s');
        return {
          success: true,
          message: data.message || 'Mot de passe configur√© avec succ√®s'
        };
      } else {
        console.log('‚ùå √âchec configuration mot de passe:', data.error);
        return {
          success: false,
          error: data.error || 'Erreur lors de la configuration du mot de passe'
        };
      }

    } catch (error: any) {
      console.error('üí• Erreur configuration mot de passe:', error);
      return {
        success: false,
        error: 'Erreur lors de la configuration du mot de passe'
      };
    }
  }

  // ==================== UTILITAIRES ====================

  /**
   * üß™ TESTER LA CONNEXION API
   */
  static async testConnection(): Promise<{ success: boolean; message?: string; error?: string }> {
    try {
      const response = await fetch(`${API_BASE_URL}/api/auth/test`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      const data = await response.json();

      return {
        success: data.success,
        message: data.message || 'API auth accessible',
      };
    } catch (error) {
      return {
        success: false,
        error: 'Impossible de se connecter au serveur d\'authentification'
      };
    }
  }

  /**
   * üîÑ S'ASSURER QUE LE TOKEN EST VALIDE
   */
  static async ensureValidToken(): Promise<boolean> {
    const token = this.getAuthToken();
    
    if (!token) {
      this.forceLogout();
      return false;
    }

    // V√©rifier la validit√© via getCurrentUser
    const user = await this.getCurrentUser();
    return !!user;
  }

  /**
   * üìä INFORMATIONS DE DEBUG (DEV SEULEMENT)
   */
  static getDebugInfo(): any {
    if (import.meta.env.PROD) {
      return null;
    }

    const token = this.getAuthToken();
    const user = this.getStoredUser();
    
    return {
      hasToken: !!token,
      hasUser: !!user,
      tokenPreview: token ? token.substring(0, 20) + '...' : null,
      userEmail: user?.email,
      userRole: user?.role,
      isAuthenticated: this.isAuthenticated(),
      storageLocation: localStorage.getItem('auth_token') ? 'localStorage' : 
                      sessionStorage.getItem('auth_token') ? 'sessionStorage' : 'none'
    };
  }
}

// ============================================================================
// INTERCEPTEUR POUR LES REQU√äTES API
// ============================================================================

export class AuthenticatedApiClient {
  private static async makeRequest<T = any>(
    endpoint: string,
    options: RequestInit = {}
  ): Promise<T> {
    try {
      const token = AuthService.getAuthToken();
      
      if (!token) {
        throw new Error('Aucun token d\'authentification disponible');
      }

      const url = endpoint.startsWith('http') ? endpoint : `${API_BASE_URL}${endpoint}`;
      
      const response = await fetch(url, {
        ...options,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
          ...options.headers,
        },
        credentials: 'include',
      });

      // Gestion des erreurs d'authentification
      if (response.status === 401) {
        console.log('üö® Erreur 401 d√©tect√©e - Token invalide');
        
        let errorData: any = null;
        try {
          errorData = await response.json();
        } catch (e) {
          // Ignore parsing errors
        }
        
        AuthService.handleAuthError(new Error('Token invalide'), errorData);
        throw new Error('Session expir√©e - Veuillez vous reconnecter');
      }

      if (!response.ok) {
        let errorMessage = `HTTP ${response.status}`;
        
        try {
          const errorData = await response.json();
          errorMessage = errorData.error || errorData.message || errorMessage;
        } catch (e) {
          // Ignore parsing errors
        }
        
        throw new Error(errorMessage);
      }

      return await response.json();

    } catch (error: any) {
      console.error(`üí• Erreur API [${endpoint}]:`, error);
      
      // V√©rifier si c'est une erreur d'auth
      if (error.message?.includes('Token') || 
          error.message?.includes('authentification') ||
          error.message?.includes('Session expir√©e')) {
        AuthService.handleAuthError(error);
      }
      
      throw error;
    }
  }

  static get<T = any>(endpoint: string): Promise<T> {
    return this.makeRequest<T>(endpoint, { method: 'GET' });
  }

  static post<T = any>(endpoint: string, data?: any): Promise<T> {
    return this.makeRequest<T>(endpoint, {
      method: 'POST',
      body: data ? JSON.stringify(data) : undefined,
    });
  }

  static put<T = any>(endpoint: string, data?: any): Promise<T> {
    return this.makeRequest<T>(endpoint, {
      method: 'PUT',
      body: data ? JSON.stringify(data) : undefined,
    });
  }

  static delete<T = any>(endpoint: string): Promise<T> {
    return this.makeRequest<T>(endpoint, { method: 'DELETE' });
  }
}

console.log('‚úÖ AuthService CORRIG√â charg√© - Gestion d\'erreurs robuste üöÄ');
console.log('üîß Corrections appliqu√©es:');
console.log('  ‚úÖ Nettoyage automatique des tokens invalides');
console.log('  ‚úÖ Gestion stricte des erreurs 401');
console.log('  ‚úÖ D√©connexion forc√©e en cas de probl√®me');
console.log('  ‚úÖ Intercepteur d\'erreurs int√©gr√©');
console.log('  ‚úÖ Compatibilit√© avec le backend expenses.js');

export default AuthService;